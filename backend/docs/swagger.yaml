basePath: /api
definitions:
  types.Artist:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      mbid:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  types.UserFollowGetResponse:
    properties:
      userName:
        type: string
    type: object
  types.UserLikeGetResponse:
    properties:
      count:
        type: integer
    type: object
  types.UserLikePostPayload:
    properties:
      userID:
        type: integer
      userPostID:
        type: integer
    required:
    - userID
    - userPostID
    type: object
  types.UserLoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  types.UserPostCreatePayload:
    properties:
      authorID:
        type: integer
      concertID:
        type: integer
      isPublic:
        type: boolean
      rating:
        type: integer
      text:
        type: string
      type:
        enum:
        - ATTENDED
        - WISHLIST
        - REVIEW
        - LISTCREATED
        type: string
      userPostID:
        type: integer
    required:
    - authorID
    - concertID
    - isPublic
    - type
    type: object
  types.UserPostGetResponse:
    properties:
      authorName:
        type: string
      concertDate:
        type: string
      concertID:
        type: integer
      createdAt:
        type: string
      isPublic:
        type: boolean
      postID:
        type: integer
      rating:
        type: integer
      text:
        type: string
      tourName:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      userPostID:
        type: integer
      venueCity:
        type: string
      venueCountry:
        type: string
      venueName:
        type: string
    type: object
  types.UserRegisterPayload:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        maxLength: 130
        minLength: 3
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8080
info:
  contact: {}
  description: API documentation for Concert Tracker.
  title: Concert Tracker API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Returns a simple Hello World message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Home Route
      tags:
      - Home
  /artist:
    get:
      description: Gets information for requested artist. If information does not
        exist in database, it is retrieved from setlist.fm API and entered into database
      parameters:
      - description: Artist Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Object that holds artist information
          schema:
            $ref: '#/definitions/types.Artist'
        "400":
          description: Error describing failure
          schema:
            type: string
      summary: Serve information for a given artist
      tags:
      - Artist
  /concert:
    get:
      description: Returns details about a concert including the list of songs performed
      parameters:
      - description: Setlist ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Concert setlist information
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Error describing failure
          schema:
            type: string
      summary: Get concert setlist information
      tags:
      - Concert
  /follow:
    get:
      description: Returns a list of either a given users followers, or who a given
        user is following
      parameters:
      - description: Given user to find list for
        in: query
        name: userID
        required: true
        type: string
      - description: Chooses between list of followers of list of who user is following.
          Accepted values are 'followers' or 'following'
        in: query
        name: type
        required: true
        type: string
      - description: page number
        in: query
        name: p
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.UserFollowGetResponse'
            type: array
        "400":
          description: Message describing error
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get lists of followers or following
      tags:
      - User
    post:
      description: Toggles whether a user is following a second user
      responses:
        "200":
          description: OK
        "400":
          description: Error describing failure
          schema:
            type: string
      summary: Handle following a user
      tags:
      - User
  /import:
    get:
      description: Gets setlist information from setlist.fm API for given artist,
        and imports it into database
      parameters:
      - description: Artist MBID
        in: path
        name: mbid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Message indicating success
          schema:
            type: string
        "400":
          description: Error describing failure
          schema:
            type: string
      summary: Import information for a given artist into database
      tags:
      - Artist
  /like:
    get:
      consumes:
      - application/json
      description: Returns the number of likes for a specific post
      parameters:
      - description: Get number of likes
        in: query
        name: userPostID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserLikeGetResponse'
        "400":
          description: Error describing failure
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get number of likes
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Toggles whether a user likes a given post
      parameters:
      - description: Like Toggle Payload
        in: body
        name: like
        required: true
        schema:
          $ref: '#/definitions/types.UserLikePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Like status toggled successfully
          schema:
            type: string
        "400":
          description: Error describing failure
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Like or unlike a post
      tags:
      - User
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email or password
          schema:
            type: string
      summary: Login user
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: Register Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid payload or user already exists
          schema:
            type: string
      summary: Register user
      tags:
      - Auth
  /userpost:
    get:
      description: Gets public posts from a user's followed network, sorted with most
        recent first
      parameters:
      - description: ID of logged in user
        in: query
        name: userID
        required: true
        type: string
      - description: page number of posts (sets of 20)
        in: query
        name: p
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Activity from user's followed network
          schema:
            $ref: '#/definitions/types.UserPostGetResponse'
        "400":
          description: Error describing failure
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get posts for user dashboard
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Creates a post for a user. Can be set to public or private with
        IsPublic
      parameters:
      - description: User Post Creation Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.UserPostCreatePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            type: string
        "400":
          description: Error describing failure - including duplicate attendance posts
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create user post
      tags:
      - User
  /validate:
    get:
      description: Verifies if a user's session cookie contains an authenticated token
      produces:
      - application/json
      responses:
        "200":
          description: user session validated
          schema:
            type: string
        "401":
          description: missing or invalid authorization token
          schema:
            type: string
      summary: Validate user session
      tags:
      - Auth
schemes:
- http
swagger: "2.0"
