basePath: /api
definitions:
  types.Artist:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      mbid:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  types.ArtistBrief:
    properties:
      mbid:
        type: string
      name:
        type: string
    type: object
  types.ArtistMetadata:
    properties:
      mbid:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
  types.ArtistResponse:
    properties:
      artist:
        allOf:
        - $ref: '#/definitions/types.Artist'
        description: Basic artist info (MBID, Name, etc.)
      artist_url:
        description: Setlist.fm artist URL
        type: string
      number_of_tours:
        description: Count of distinct tours
        type: integer
      recent_setlists:
        description: Most recent setlists (max 20)
        items:
          $ref: '#/definitions/types.RecentSetlistEntry'
        type: array
      top_songs:
        description: Scraped top song stats
        items:
          additionalProperties:
            type: string
          type: object
        type: array
      total_setlists:
        description: Total number of setlists found
        type: integer
      tour_names:
        description: List of tour names
        items:
          type: string
        type: array
      upcoming_shows:
        description: Scraped upcoming show data
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    type: object
  types.CityMetadata:
    properties:
      country:
        type: string
      name:
        type: string
      state:
        type: string
    type: object
  types.ConcertResponse:
    properties:
      artist:
        $ref: '#/definitions/types.ArtistMetadata'
      event_date:
        type: string
      id:
        type: string
      info:
        description: Optional additional info
        type: string
      last_updated:
        type: string
      songs:
        items:
          $ref: '#/definitions/types.SongMetadata'
        type: array
      tour:
        allOf:
        - $ref: '#/definitions/types.TourMetadata'
        description: Optional
      url:
        type: string
      venue:
        $ref: '#/definitions/types.VenueMetadata'
      version_id:
        type: string
    type: object
  types.RecentSetlistEntry:
    properties:
      city:
        type: string
      date:
        description: 'Format: "02-01-2006"'
        type: string
      id:
        type: string
      url:
        type: string
      venue:
        type: string
    type: object
  types.SongMetadata:
    properties:
      cover:
        $ref: '#/definitions/types.ArtistBrief'
      info:
        type: string
      name:
        type: string
      order:
        type: integer
      tape:
        type: boolean
      with:
        $ref: '#/definitions/types.ArtistBrief'
    type: object
  types.TourMetadata:
    properties:
      name:
        type: string
    type: object
  types.UserLoginPayload:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  types.UserRegisterPayload:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        maxLength: 130
        minLength: 3
        type: string
    required:
    - email
    - name
    - password
    type: object
  types.VenueMetadata:
    properties:
      city:
        $ref: '#/definitions/types.CityMetadata'
      id:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API documentation for Concert Tracker.
  title: Concert Tracker API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Returns a simple Hello World message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Home Route
      tags:
      - Home
  /artist:
    get:
      description: Gets information for requested artist. If information does not
        exist in database, it is retrieved from setlist.fm API and entered into database
      parameters:
      - description: Artist Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Object that holds artist information
          schema:
            $ref: '#/definitions/types.ArtistResponse'
        "400":
          description: Error describing failure
          schema:
            type: string
      summary: Serve information for a given artist
      tags:
      - Artist
  /concert:
    get:
      description: Returns details about a concert including the list of songs performed
      parameters:
      - description: Setlist ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Concert setlist information
          schema:
            $ref: '#/definitions/types.ConcertResponse'
        "400":
          description: Error describing failure
          schema:
            type: string
      summary: Get concert setlist information
      tags:
      - Concert
  /import:
    get:
      description: Gets setlist information from setlist.fm API for given artist,
        and imports it into database
      parameters:
      - description: Artist MBID
        in: path
        name: mbid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Message indicating success
          schema:
            type: string
        "400":
          description: Error describing failure
          schema:
            type: string
      summary: Import information for a given artist into database
      tags:
      - Artist
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.UserLoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email or password
          schema:
            type: string
      summary: Login user
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user
      parameters:
      - description: Register Payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.UserRegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid payload or user already exists
          schema:
            type: string
      summary: Register user
      tags:
      - Auth
  /validate:
    get:
      description: Verifies if a user's session cookie contains an authenticated token
      produces:
      - application/json
      responses:
        "200":
          description: user session validated
          schema:
            type: string
        "401":
          description: missing or invalid authorization token
          schema:
            type: string
      summary: Validate user session
      tags:
      - Auth
schemes:
- http
swagger: "2.0"
